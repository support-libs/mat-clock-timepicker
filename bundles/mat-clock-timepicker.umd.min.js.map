{"version":3,"sources":["../package/src/components/mat-clock/mat-clock.component.ts","../package/src/components/mat-time-dialog/mat-time-dialog.component.ts","../package/src/components/mat-time/mat-time.component.ts","../package/src/modules/material-clock-timepicker.module.ts"],"names":["HOURS","MINUTES","ClockComponent","this","userTimeChange","EventEmitter","viewChange","steps","Array","prototype","ngOnChanges","setupUI","currentView","CLOCK_TYPE","i","userTime","format","push","selectedTimePart","hour","minute","getPointerStyle","divider","degrees","-webkit-transform","Math","round","-ms-transform","transform","getTimeValueClass","step","index","STEP_DEG","classes","changeTimeValue","emit","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Input","Output","TimeDialogComponent","data","color","dialogRef","VIEW_HOURS","VIEW_MINUTES","time","revert","close","submit","Inject","MAT_DIALOG_DATA","MatDialogRef","TimeComponent","onRevert","onSubmit","ngOnInit","meriden","revertLabel","submitLabel","formatHour","String","formatMinute","setCurrentView","type","setMeridien","m","emituserTimeChange","event","MaterialClockTimepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatButtonToggleModule","MatDialogModule","MatIconModule","MatInputModule","MatSelectModule","MatToolbarModule","MatFormFieldModule","declarations","exports","entryComponents"],"mappings":"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","file":"mat-clock-timepicker.umd.min.js.map","sourcesContent":["import { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\n\n// Current type to show\nexport enum CLOCK_TYPE {\n    HOURS = 1,\n    MINUTES = 2\n}\n\nexport type TimeFormat = 12 | 24;\n\nexport interface ITime {\n    hour: number;\n    minute: number;\n    meriden: 'PM' | 'AM';\n    format: TimeFormat;\n}\n\n@Component({\n    selector: 'mat-clock',\n    styleUrls: ['./mat-clock.component.scss'],\n    templateUrl: './mat-clock.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ClockComponent implements OnChanges {\n\n    @Input() public userTime: ITime;\n    @Output() public userTimeChange: EventEmitter<ITime> = new EventEmitter();\n    @Input() public currentView: CLOCK_TYPE;\n    @Output() public viewChange = new EventEmitter<CLOCK_TYPE>();\n    @Input() public color: string;\n\n    public steps = new Array<number>();\n    selectedTimePart: number;\n    private STEP_DEG: number;\n\n    ngOnChanges() {\n        this.setupUI();\n    }\n\n    private setupUI() {\n\n        this.steps = new Array<number>();\n\n        switch (this.currentView) {\n\n            case CLOCK_TYPE.HOURS:\n\n                for (let i = 1; i <= this.userTime.format; i++) {\n\n                    this.steps.push(i);\n                    this.selectedTimePart = this.userTime.hour || 0;\n\n                    if (this.selectedTimePart > this.userTime.format) {\n\n                        this.selectedTimePart -= this.userTime.format;\n                    }\n                }\n                break;\n\n            case CLOCK_TYPE.MINUTES:\n\n                for (let i = 5; i <= 55; i += 5) {\n\n                    this.steps.push(i);\n                }\n                this.steps.push(0);\n                this.selectedTimePart = this.userTime.minute || 0;\n                break;\n        }\n    }\n\n    public getPointerStyle() {\n\n        let divider = 1;\n        switch (this.currentView) {\n\n            case CLOCK_TYPE.HOURS:\n                divider = this.userTime.format;\n                break;\n\n            case CLOCK_TYPE.MINUTES:\n                divider = 60;\n                break;\n        }\n\n        let degrees = 0;\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;\n        } else {\n            degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;\n        }\n\n        const style = {\n\n            '-webkit-transform': 'rotate(' + degrees + 'deg)',\n            '-ms-transform': 'rotate(' + degrees + 'deg)',\n            'transform': 'rotate(' + degrees + 'deg)'\n        };\n\n        return style;\n    }\n\n    private getTimeValueClass(step: number, index: number) {\n\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            this.STEP_DEG = 360 / this.userTime.format;\n        } else {\n            this.STEP_DEG = 360 / 12;\n        }\n        let classes = 'mat-clock-step mat-clock-deg' + (this.STEP_DEG * (index + 1));\n\n        if (this.selectedTimePart === step) {\n\n            classes += ' mat-primary';\n        }\n\n        return classes;\n    }\n\n    private changeTimeValue(step: number) {\n\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            this.userTime.hour = step;\n\n            // auto switch to minutes\n            this.viewChange.emit(CLOCK_TYPE.MINUTES);\n        } else {\n            this.userTime.minute = step;\n\n            // auto switch to hours\n            this.viewChange.emit(CLOCK_TYPE.HOURS);\n        }\n        this.userTimeChange.emit(this.userTime);\n    }\n}\n","\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\nimport { CLOCK_TYPE, ITime } from '../mat-clock/mat-clock.component';\n\nexport interface DialogData {\n  time: ITime;\n  color: string;\n}\n\n@Component({\n    styleUrls: ['./mat-time-dialog.component.scss'],\n    templateUrl: './mat-time-dialog.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class TimeDialogComponent {\n\n    public userTime: ITime;\n    private VIEW_HOURS = CLOCK_TYPE.HOURS;\n    private VIEW_MINUTES = CLOCK_TYPE.MINUTES;\n    private currentView: CLOCK_TYPE = this.VIEW_HOURS;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data: DialogData,\n        @Inject(MAT_DIALOG_DATA) public color: string,\n        private dialogRef: MatDialogRef<TimeDialogComponent>) {\n\n        this.userTime = data.time;\n        this.color = data.color;\n    }\n\n    public revert() {\n\n        this.dialogRef.close(-1);\n    }\n\n    public submit() {\n\n        this.dialogRef.close(this.userTime);\n    }\n}\n","\nimport { Component, Input, Output, OnInit, EventEmitter, ViewEncapsulation } from '@angular/core';\n\nimport { CLOCK_TYPE, ITime } from '../mat-clock/mat-clock.component';\n\n@Component({\n  selector: 'mat-time',\n  templateUrl: './mat-time.component.html',\n  styleUrls: ['./mat-time.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TimeComponent implements OnInit {\n\n  @Input() userTime: ITime;\n  @Output() userTimeChange: EventEmitter<ITime> = new EventEmitter();\n\n  @Input() revertLabel: string;\n  @Input() submitLabel: string;\n\n  @Output() onRevert: EventEmitter<null> = new EventEmitter();\n  @Output() onSubmit: EventEmitter<ITime> = new EventEmitter();\n\n  @Input() color: string;\n\n  public VIEW_HOURS = CLOCK_TYPE.HOURS;\n  public VIEW_MINUTES = CLOCK_TYPE.MINUTES;\n  public currentView: CLOCK_TYPE = this.VIEW_HOURS;\n\n  constructor() { }\n\n  ngOnInit() {\n\n    if (!this.userTime) {\n\n      this.userTime = {\n\n        hour: 6,\n        minute: 0,\n        meriden: 'PM',\n        format: 12\n      };\n    }\n\n    if (!this.revertLabel) {\n\n      this.revertLabel = 'Cancel';\n    }\n\n    if (!this.submitLabel) {\n\n      this.submitLabel = 'Okay';\n    }\n  }\n\n  public formatHour(): string {\n\n    if (this.userTime.format === 24) {\n      if (this.userTime.hour === 24) {\n        return '00';\n      } else if (this.userTime.hour < 10) {\n        return '0' + String(this.userTime.hour);\n      }\n    }\n    return String(this.userTime.hour);\n  }\n\n  public formatMinute(): string {\n\n    if (this.userTime.minute === 0) {\n      return '00';\n    } else if (this.userTime.minute < 10) {\n      return '0' + String(this.userTime.minute);\n    } else {\n      return String(this.userTime.minute);\n    }\n  }\n\n  public setCurrentView(type: CLOCK_TYPE) {\n\n    this.currentView = type;\n  }\n\n  public setMeridien(m: 'PM' | 'AM') {\n\n    this.userTime.meriden = m;\n  }\n\n  public revert() {\n\n    this.onRevert.emit();\n  }\n\n  public submit() {\n\n    this.onSubmit.emit(this.userTime);\n  }\n\n  public emituserTimeChange(event: any) {\n\n    this.userTimeChange.emit(this.userTime);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule, MatButtonToggleModule, MatDialogModule, MatFormFieldModule, MatIconModule, MatInputModule, MatSelectModule, MatToolbarModule } from '@angular/material';\n\nimport { ClockComponent } from '../components/mat-clock/mat-clock.component';\nimport { TimeDialogComponent } from '../components/mat-time-dialog/mat-time-dialog.component';\nimport { TimeComponent } from '../components/mat-time/mat-time.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatDialogModule,\n    MatIconModule,\n    MatInputModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MatFormFieldModule\n  ],\n  declarations: [\n    TimeDialogComponent,\n    ClockComponent,\n    TimeComponent\n  ],\n  exports: [\n    TimeDialogComponent,\n    ClockComponent,\n    TimeComponent\n  ],\n  entryComponents: [TimeDialogComponent]\n})\nexport class MaterialClockTimepickerModule {}\n"]}