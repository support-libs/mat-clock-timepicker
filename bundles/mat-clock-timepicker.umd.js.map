{"version":3,"file":"mat-clock-timepicker.umd.js","sources":["../package/src/components/mat-clock/mat-clock.component.ts","../package/src/components/mat-time-dialog/mat-time-dialog.component.ts","../package/src/components/mat-time/mat-time.component.ts","../package/src/modules/material-clock-timepicker.module.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\n\n// Current type to show\nexport enum CLOCK_TYPE {\n    HOURS = 1,\n    MINUTES = 2\n}\n\nexport type TimeFormat = 12 | 24;\n\nexport interface ITime {\n    hour: number;\n    minute: number;\n    meriden: 'PM' | 'AM';\n    format: TimeFormat;\n}\n\n@Component({\n    selector: 'mat-clock',\n    styleUrls: ['./mat-clock.component.scss'],\n    templateUrl: './mat-clock.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ClockComponent implements OnChanges {\n\n    @Input() public userTime: ITime;\n    @Output() public userTimeChange: EventEmitter<ITime> = new EventEmitter();\n    @Input() public currentView: CLOCK_TYPE;\n    @Output() public viewChange = new EventEmitter<CLOCK_TYPE>();\n    @Input() public color: string;\n\n    public steps = new Array<number>();\n    selectedTimePart: number;\n    private STEP_DEG: number;\n\n    ngOnChanges() {\n        this.setupUI();\n    }\n\n    private setupUI() {\n\n        this.steps = new Array<number>();\n\n        switch (this.currentView) {\n\n            case CLOCK_TYPE.HOURS:\n\n                for (let i = 1; i <= this.userTime.format; i++) {\n\n                    this.steps.push(i);\n                    this.selectedTimePart = this.userTime.hour || 0;\n\n                    if (this.selectedTimePart > this.userTime.format) {\n\n                        this.selectedTimePart -= this.userTime.format;\n                    }\n                }\n                break;\n\n            case CLOCK_TYPE.MINUTES:\n\n                for (let i = 5; i <= 55; i += 5) {\n\n                    this.steps.push(i);\n                }\n                this.steps.push(0);\n                this.selectedTimePart = this.userTime.minute || 0;\n                break;\n        }\n    }\n\n    public getPointerStyle() {\n\n        let divider = 1;\n        switch (this.currentView) {\n\n            case CLOCK_TYPE.HOURS:\n                divider = this.userTime.format;\n                break;\n\n            case CLOCK_TYPE.MINUTES:\n                divider = 60;\n                break;\n        }\n\n        let degrees = 0;\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;\n        } else {\n            degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;\n        }\n\n        const style = {\n\n            '-webkit-transform': 'rotate(' + degrees + 'deg)',\n            '-ms-transform': 'rotate(' + degrees + 'deg)',\n            'transform': 'rotate(' + degrees + 'deg)'\n        };\n\n        return style;\n    }\n\n    private getTimeValueClass(step: number, index: number) {\n\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            this.STEP_DEG = 360 / this.userTime.format;\n        } else {\n            this.STEP_DEG = 360 / 12;\n        }\n        let classes = 'mat-clock-step mat-clock-deg' + (this.STEP_DEG * (index + 1));\n\n        if (this.selectedTimePart === step) {\n\n            classes += ' mat-primary';\n        }\n\n        return classes;\n    }\n\n    private changeTimeValue(step: number) {\n\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            this.userTime.hour = step;\n\n            // auto switch to minutes\n            this.viewChange.emit(CLOCK_TYPE.MINUTES);\n        } else {\n            this.userTime.minute = step;\n\n            // auto switch to hours\n            this.viewChange.emit(CLOCK_TYPE.HOURS);\n        }\n        this.userTimeChange.emit(this.userTime);\n    }\n}\n","\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\nimport { CLOCK_TYPE, ITime } from '../mat-clock/mat-clock.component';\n\nexport interface DialogData {\n  time: ITime;\n  color: string;\n}\n\n@Component({\n    styleUrls: ['./mat-time-dialog.component.scss'],\n    templateUrl: './mat-time-dialog.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class TimeDialogComponent {\n\n    public userTime: ITime;\n    private VIEW_HOURS = CLOCK_TYPE.HOURS;\n    private VIEW_MINUTES = CLOCK_TYPE.MINUTES;\n    private currentView: CLOCK_TYPE = this.VIEW_HOURS;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data: DialogData,\n        @Inject(MAT_DIALOG_DATA) public color: string,\n        private dialogRef: MatDialogRef<TimeDialogComponent>) {\n\n        this.userTime = data.time;\n        this.color = data.color;\n    }\n\n    public revert() {\n\n        this.dialogRef.close(-1);\n    }\n\n    public submit() {\n\n        this.dialogRef.close(this.userTime);\n    }\n}\n","\nimport { Component, Input, Output, OnInit, EventEmitter, ViewEncapsulation } from '@angular/core';\n\nimport { CLOCK_TYPE, ITime } from '../mat-clock/mat-clock.component';\n\n@Component({\n  selector: 'mat-time',\n  templateUrl: './mat-time.component.html',\n  styleUrls: ['./mat-time.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TimeComponent implements OnInit {\n\n  @Input() userTime: ITime;\n  @Output() userTimeChange: EventEmitter<ITime> = new EventEmitter();\n\n  @Input() revertLabel: string;\n  @Input() submitLabel: string;\n\n  @Output() onRevert: EventEmitter<null> = new EventEmitter();\n  @Output() onSubmit: EventEmitter<ITime> = new EventEmitter();\n\n  @Input() color: string;\n\n  public VIEW_HOURS = CLOCK_TYPE.HOURS;\n  public VIEW_MINUTES = CLOCK_TYPE.MINUTES;\n  public currentView: CLOCK_TYPE = this.VIEW_HOURS;\n\n  constructor() { }\n\n  ngOnInit() {\n\n    if (!this.userTime) {\n\n      this.userTime = {\n\n        hour: 6,\n        minute: 0,\n        meriden: 'PM',\n        format: 12\n      };\n    }\n\n    if (!this.revertLabel) {\n\n      this.revertLabel = 'Cancel';\n    }\n\n    if (!this.submitLabel) {\n\n      this.submitLabel = 'Okay';\n    }\n  }\n\n  public formatHour(): string {\n\n    if (this.userTime.format === 24) {\n      if (this.userTime.hour === 24) {\n        return '00';\n      } else if (this.userTime.hour < 10) {\n        return '0' + String(this.userTime.hour);\n      }\n    }\n    return String(this.userTime.hour);\n  }\n\n  public formatMinute(): string {\n\n    if (this.userTime.minute === 0) {\n      return '00';\n    } else if (this.userTime.minute < 10) {\n      return '0' + String(this.userTime.minute);\n    } else {\n      return String(this.userTime.minute);\n    }\n  }\n\n  public setCurrentView(type: CLOCK_TYPE) {\n\n    this.currentView = type;\n  }\n\n  public setMeridien(m: 'PM' | 'AM') {\n\n    this.userTime.meriden = m;\n  }\n\n  public revert() {\n\n    this.onRevert.emit();\n  }\n\n  public submit() {\n\n    this.onSubmit.emit(this.userTime);\n  }\n\n  public emituserTimeChange(event: any) {\n\n    this.userTimeChange.emit(this.userTime);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule, MatButtonToggleModule, MatDialogModule, MatFormFieldModule, MatIconModule, MatInputModule, MatSelectModule, MatToolbarModule } from '@angular/material';\n\nimport { ClockComponent } from '../components/mat-clock/mat-clock.component';\nimport { TimeDialogComponent } from '../components/mat-time-dialog/mat-time-dialog.component';\nimport { TimeComponent } from '../components/mat-time/mat-time.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatDialogModule,\n    MatIconModule,\n    MatInputModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MatFormFieldModule\n  ],\n  declarations: [\n    TimeDialogComponent,\n    ClockComponent,\n    TimeComponent\n  ],\n  exports: [\n    TimeDialogComponent,\n    ClockComponent,\n    TimeComponent\n  ],\n  entryComponents: [TimeDialogComponent]\n})\nexport class MaterialClockTimepickerModule {}\n"],"names":["EventEmitter","Component","ViewEncapsulation","Input","Output","Inject","MAT_DIALOG_DATA","MatDialogRef","NgModule","CommonModule","MatButtonModule","MatButtonToggleModule","MatDialogModule","MatIconModule","MatInputModule","MatSelectModule","MatToolbarModule","MatFormFieldModule"],"mappings":"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"}